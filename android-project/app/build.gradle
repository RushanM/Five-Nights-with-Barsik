//AddPrePlugins
apply plugin: 'com.android.application'

//AddPostPlugins
android {
    compileSdkVersion BUILD_API.toInteger()

    defaultConfig {
        //DefaultConfigs
        applicationId BUILD_APPID
        namespace BUILD_APPID
        minSdkVersion BUILD_MIN.toInteger()
        targetSdkVersion BUILD_TARGET.toInteger()
        versionCode BUILD_VERS_CODE.toInteger()
        versionName BUILD_VERS_NAME

        if (BUILD_API.toInteger() == 29
                && BUILD_TARGET.toInteger() == 29
                    && BUILD_WITH_LEGACY.toBoolean()==true)
        {
            manifestPlaceholders = [MaxWrite: "29", Legacy: "true", excluded: BUILD_EXCLUDED]
        }
        else
        {
            manifestPlaceholders = [MaxWrite: "29", Legacy: "false", excluded: BUILD_EXCLUDED]
        }

        resValue "integer", "insets_Mode", BUILD_INSETS

    }

    // настройка подписи сборки для выпуска
    android {
        signingConfigs {
            release {
                keyAlias = System.getenv('KEY_ALIAS') ?: project.findProperty('KEY_ALIAS')?.toString()
                keyPassword = System.getenv('KEY_PASSWORD') ?: project.findProperty('KEY_PASSWORD')?.toString()

                def storeFilePath = System.getenv('STORE_FILE') ?: project.findProperty('STORE_FILE')?.toString()
                if (storeFilePath == null) {
                    throw new GradleException('STORE_FILE не задан')
                }
                storeFile = file(storeFilePath)

                storePassword = System.getenv('STORE_PASSWORD') ?: project.findProperty('STORE_PASSWORD')?.toString()
            }
        }
    }
    
    buildTypes {
        release {
            resValue "bool", "APP_DEBUG", "false"
            resValue "bool", "APP_SECURE", BUILD_AS_SECURE
            signingConfig signingConfigs.release
            minifyEnabled true
            if(BUILD_OBFUSCATE.toBoolean()==true)
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            else
                // правила для сохранения необходимых методов
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            resValue "bool", "APP_DEBUG", "true"
            resValue "bool", "APP_SECURE", BUILD_AS_SECURE
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        //BuildTypes
    }
    repositories {
        //add Repository
    }
    compileOptions {
        if(BUILD_API.toInteger() <=29 && !BUILD_USE_11.toBoolean())
        {
            println 'See you still have some old code there'

            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    }
    androidResources {
        noCompress 'ccn', 'mp3', 'wav', 'mid', 'ogg', 'mp4', 'm4v', 'aac'
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
    }
    //AssetsPacks
}

dependencies {
    //Projectsdk
    implementation "androidx.annotation:annotation:$version_X_annotation"
    implementation "androidx.appcompat:appcompat:$version_X_appcompat"
    //implementation "androidx.exifinterface:exifinterface:$version_X_exif"
    implementation "androidx.core:core:$version_X_core"
    implementation "com.google.android.play:asset-delivery:$version_X_play_asset"
    implementation "androidx.documentfile:documentfile:$version_X_documentfile"
    implementation 'org.apache.commons:commons-io:1.3.2'
    	implementation "com.google.android.gms:play-services-auth:$version_X_gms_play_services_auth"
	implementation "androidx.constraintlayout:constraintlayout:$version_X_constraint_layout"
//Googlelibs

    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
}


//AddTasks